package com.InitialSetup;

 
import static io.restassured.RestAssured.given;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.Map.Entry;

import org.apache.commons.configuration2.PropertiesConfiguration;
import org.apache.commons.configuration2.PropertiesConfigurationLayout;
import org.apache.commons.configuration2.ex.ConfigurationException;
import org.apache.commons.lang.RandomStringUtils;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Optional;
import org.testng.annotations.Parameters;

import com.Reporting.ExtentTestManager;
//import com.Reporting.Extent_Reporting;
import com.TestData.Excel_Handling;
import com.Utilities.Assertion;
import com.Utilities.Constants;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;


public class BaseClass_old {

	public WebDriver driver;
	public WebDriver ApiTest;
	public static String testCaseName = null;
	public String driverPath = Constants.drivePath;
	public String filePath = Constants.propertiesFile+File.separator+"Config.properties";
	public static Map<String, Object> map = new HashMap<String, Object>();
	public static Map<String, Object> tempmap = new HashMap<String, Object>();
	public static String logintoken;
	public static String forgotpwdtoken;
	public static String tcID = null;
	public static Properties prop;

	public WebDriver getDriver(){

		prop = new Properties();
		return driver;		

	}
	//Set Body content
	public static void setBody(String key, Object value){

		//		key = "\"" + key + "\"";
		//		strValue = "\"" + strValue + "\"";
		map.put(key, value);
	}



	//Set Body content as an object
	public static void setObjectBody(String parentKey,String key, Object value){
		//Set Body content as an object
		if(map.containsKey(parentKey)) {
			HashMap<String, String> temp = (HashMap<String, String>)map.get(parentKey);
			temp.put(key, String.valueOf(value));
			map.remove(parentKey);
			map.put(parentKey, temp);
		}else {
			Map<String, String> parent = new HashMap<String, String>();
			parent.put(key, String.valueOf(value));
			map.put(parentKey, parent);
		}
	}


	//Get the constructed body
	public Map<String, Object> getBody() {
		//		tempmap = map;
		Map<String, Object> tempmap = new HashMap<String, Object>();
		tempmap.putAll(map);
		map.clear();
		System.out.println(tempmap);
		return tempmap;
	}

	public String getProperty(String name) throws IOException
	{
		InputStream inputStream = new FileInputStream(filePath);
		prop.load(inputStream);
		String id = prop.getProperty(name);        
		inputStream.close();
		return id;


	}

	public void setProperty(String name, Object value) throws IOException, ConfigurationException
	{		
		File file = new File(filePath);
		PropertiesConfiguration config = new PropertiesConfiguration();
		PropertiesConfigurationLayout layout = new PropertiesConfigurationLayout();
		layout.load(config, new InputStreamReader(new FileInputStream(file)));
		config.setProperty(name, value);
		layout.save(config, new FileWriter(filePath, false));

	}


	public Long getAutoGeneratedID(String response)
	{
		JsonPath js = new JsonPath(response);
		Long getID = (long) js.getInt("id");
		ExtentTestManager.startlog("", "", "ID Generated as: "+getID);
		return getID;
	}
	public void setDriver(String browserType, String HostURL) throws InterruptedException{
		//		switch(browserType){
		//
		//		case "IE":
		//			driver = initIEDriver(HostURL);
		//			break;
		//
		//		case "CHROME":
		//			driver = initChromeDriver(HostURL);
		//			break;
		//	
		//		case "RESTAPI":	
		//			driver = restApi(HostURL);
		//			
		//
		//		default :
		//			System.out.println("you have enetered as invalid browser");
		//		}		
		driver = restApi(HostURL);

	}

	public WebDriver initChromeDriver(String appURL) throws InterruptedException {
		System.out.println("Launching google chrome driver!!! .");
		System.setProperty("webdriver.chrome.driver", driverPath
				+ "chromedriver.exe");
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		Thread.sleep(5000);
		driver.navigate().to(appURL);
		driver.manage().deleteAllCookies();
		return driver;
	}


	public WebDriver initIEDriver(String appURL) {
		System.out.println("Launching google IE driver!!! .");
		System.setProperty("webdriver.ie.driver", driverPath
				+ "IEDriverServer.exe");

		DesiredCapabilities cap = DesiredCapabilities.internetExplorer();
		cap.setCapability(InternetExplorerDriver.INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS, true);
		cap.setCapability("nativeEvents", false);
		cap.setCapability("ignoreProctedModeSettings", true);
		cap.setCapability("disable-popup-blocking", true);

		driver = new InternetExplorerDriver(cap);
		driver.manage().window().maximize();
		driver.navigate().to(appURL);
		driver.manage().deleteAllCookies();
		return driver;


	}

	public WebDriver restApi(String HostURL) {		
		return driver;
	}
	
	  @Parameters({ "serviceType" , "appURL","tcID" })
	  
	  @BeforeClass public void initializeTestBaseSetup(String browserType, String
	  appURL,String tcID) { try { setDriver(browserType.toUpperCase(), appURL);
	  testCaseName = tcID;
	  
	  } catch (Exception e) { System.out.println("Error....." + e.getStackTrace());
	  } }
	 

	public void getBaseUrl(String testCaseID,String stepName) throws Exception
	{		
		String BaseURL = Excel_Handling.Get_Data(testCaseName, "HostURL").trim();			
		ExtentTestManager.startlog(testCaseID,stepName, "Get Host Url");
		RestAssured.baseURI = BaseURL;	
		ExtentTestManager.pass(testCaseID,stepName, "Host Url Retrieve");			
	}
	public String getResourceUrl(String testCaseID, String stepName) throws InterruptedException, Exception {
		ExtentTestManager.startlog(testCaseID, stepName, "Get resourceURL Url");
		String resourceURL = Excel_Handling.Get_Data(testCaseName, "ResourceURL").trim();
		ExtentTestManager.pass(testCaseID, stepName, "resourceURL Url is: " + resourceURL);
		return resourceURL;
	}

	public void verifyResponseCode(Response response, int expectedStatusCode, String message) {
		Assertion.assertEquals(response.getStatusCode(), expectedStatusCode, message);
		ExtentTestManager.report(testCaseName, "Verifying status", "Actual Response code is :"+response.getStatusCode()+" expected code is: "+expectedStatusCode);
		System.out.println("pihjhsjhkjsh");
	}
	public String getRandomName() {
		  String generatedString = RandomStringUtils.randomAlphabetic(10);	 
			
			return generatedString;
		}

	/*	public boolean verify_ApplicationId_Response_Body(String testCaseID, String stepName,ApplicationIDDTO applicationIDDTO) throws Throwable {
		try {
			long AppId = js.getLong(object.appIDHeader);
			String AppName = js.getString(object.appNameHeader);       
			if (applicationIDDTO == null) {
				boolean allNull = (AppId == 0 && AppName == null);
				if (allNull) {
					Extent_Reporting.Log_Pass(testCaseID, stepName, "Actual Application Response ID is : " + AppId + "Expected Application Response ID: " );
					Extent_Reporting.Log_Pass(testCaseID, stepName, "Actual Application name is : " + AppName + "Expected Application Response ID: ");
					return true;
				} else {
					Extent_Reporting.Log_Fail(testCaseID, stepName, "Was expecint application id to be null but was " + AppId + " and application name to be null but was " + AppName);
					return false;
				}
			} else {           
				if (AppId == applicationIDDTO.getAppId()) {

					Extent_Reporting.Log_Pass(testCaseID, stepName, "Actual Application Response ID is : " + AppId + "Expected Application Response ID: " + applicationIDDTO.getAppId());
					return true;
				} else {
					Extent_Reporting.Log_Fail(testCaseID, stepName, "Was expecint application id to be null but was " + AppId + "Expected Application Response ID: " + applicationIDDTO.getAppId());
					return false;
				}            
			}
		}catch(Exception e) {
			Extent_Reporting.Log_Fail(testCaseID, stepName,"Response body", e);
			return false;
		}   	
	}*/

	/*	public List<Set<Map.Entry<String, JsonElement>>> createMaps(Response response) throws FileNotFoundException {
	List<Set<Map.Entry<String, JsonElement>>> list = new ArrayList<>();
	JsonPath jsonPath = new JsonPath(response.asString());
	String json = response.asString();
	JsonParser parser = new JsonParser();
    JsonElement element = parser.parse(json);
    JsonObject obj = element.getAsJsonObject(); 
    Set<Map.Entry<String, JsonElement>> response_entries = obj.entrySet();
    List list = new ArrayList<>(response_entries);
	Gson gson = new Gson();
	Object object = gson.fromJson(new FileReader(Constants.datasheetPath +"//" + Excel_Handling.Get_Data(testCaseName, "testCaseName")  + ".json"), Object.class);
	String str = new Gson().toJson(object);
	parser = new JsonParser();
    element = parser.parse(str);
    obj = element.getAsJsonObject();
    Set<Map.Entry<String, JsonElement>> json_entries = obj.entrySet();
    //List list = new ArrayList<>(json_entries);
    return List<Set<Map.Entry<String, JsonElement>>>;
	}*/

	public void verifyResponseBodyContent(Response response) throws FileNotFoundException {
		JsonPath jsonPath = new JsonPath(response.asString());
		String json = response.asString();
		JsonParser parser = new JsonParser();
		JsonElement element = parser.parse(json);
		JsonObject obj = element.getAsJsonObject(); 
		Set<Map.Entry<String, JsonElement>> response_entries = obj.entrySet();
		List list = new ArrayList<>(response_entries);
		Gson gson = new Gson();
		System.out.println("File name " + Excel_Handling.Get_Data(testCaseName, "testCaseName") + ".json");
		Object object = gson.fromJson(new FileReader(Constants.JsonFilePath +"//" + Excel_Handling.Get_Data(testCaseName, "testCaseName") + ".json"), Object.class);
		String str = new Gson().toJson(object);
		parser = new JsonParser();
		element = parser.parse(str);
		obj = element.getAsJsonObject();
		Set<Map.Entry<String, JsonElement>> json_entries = obj.entrySet();
		//List list = new ArrayList<>(json_entries);
		int i = 0;
		for (Map.Entry<String, JsonElement> jsonentry: json_entries) {
			System.out.println("Current JSON Key" + jsonentry.getKey());
			String jsonkey = jsonentry.getKey();
			Map.Entry<String, JsonElement> data = (Entry<String, JsonElement>) list.get(i);
			String responsekey = data.getKey();
			System.out.println("main key ----------> " + data.getKey());
			System.out.println("Current Response Key" + responsekey);
			System.out.println("key---------------> "  + responsekey);
			System.out.println("value of key--------------->" + jsonPath.get(jsonkey));
			Assertion.assertNotNull(jsonPath.getString(jsonkey), "Check \"" + jsonkey + "\" exists in the response");
			//            	Assertion.assertEquals(jsonkey, responsekey, "Check expected position of " + responsekey);
			i++;
		} 
	}

	public void verifyResponseBodyContentSequence(Response response) throws FileNotFoundException {
		JsonPath jsonPath = new JsonPath(response.asString());
		String json = response.asString();
		JsonParser parser = new JsonParser();
		JsonElement element = parser.parse(json);
		JsonObject obj = element.getAsJsonObject(); 
		Set<Map.Entry<String, JsonElement>> response_entries = obj.entrySet();
		List list = new ArrayList<>(response_entries);
		Gson gson = new Gson();
		Object object = gson.fromJson(new FileReader(Constants.JsonFilePath +"//" + Excel_Handling.Get_Data(testCaseName, "testCaseName")  + ".json"), Object.class);
		String str = new Gson().toJson(object);
		parser = new JsonParser();
		element = parser.parse(str);
		obj = element.getAsJsonObject();
		Set<Map.Entry<String, JsonElement>> json_entries = obj.entrySet();
		//List list = new ArrayList<>(json_entries);
		int i = 0;
		for (Map.Entry<String, JsonElement> jsonentry: json_entries) {
			System.out.println("Current JSON Key" + jsonentry.getKey());
			String jsonkey = jsonentry.getKey();
			Map.Entry<String, JsonElement> data = (Entry<String, JsonElement>) list.get(i);
			String responsekey = data.getKey();
			System.out.println("main key ----------> " + data.getKey());
			System.out.println("Current Response Key" + responsekey);
			System.out.println("key---------------> "  + responsekey);
			System.out.println("value of key--------------->" + jsonPath.get(jsonkey));
			//            	Assertion.assertNotNull(jsonPath.getString(jsonkey), "Check \"" + jsonkey + "\" exists in the response");
			Assertion.assertEquals(jsonkey, responsekey, "Check expected position of \"" + responsekey + "\"");
			//            	System.out.println("value ---------->>>>" + (jsonPath.get(jsonkey)));
			//            	System.out.println("class ---------->>>>" + (jsonPath.get(jsonkey)).getClass().getSimpleName() );
			//            	Assertion.assertEquals(jsonPath.get(jsonkey).getClass().getSimpleName(), data.getValue().getClass().getSimpleName(), "Check datatype match \"" + jsonPath.get(jsonkey) + "\" - " + "Expected: " + jsonPath.getJsonObject(jsonkey).getClass().getSimpleName()+ " ----  Actual: " + data.getValue().getClass().getSimpleName());
			i++;
		} 
	}

	public void verifyResponseBodyContentDatatype(Response response) throws FileNotFoundException {
		JsonPath responsePath = new JsonPath(response.asString());
		String json = response.asString();
		JsonParser parser = new JsonParser();
		JsonElement element = parser.parse(json);
		JsonObject obj = element.getAsJsonObject(); 
		Set<Map.Entry<String, JsonElement>> response_entries = obj.entrySet();
		List list = new ArrayList<>(response_entries);
		Gson gson = new Gson();
		Object object = gson.fromJson(new FileReader(Constants.JsonFilePath +"//" + Excel_Handling.Get_Data(testCaseName, "testCaseName")  + ".json"), Object.class);
		String str = new Gson().toJson(object);
		parser = new JsonParser();
		element = parser.parse(str);
		obj = element.getAsJsonObject();
		JsonPath jsonPath = new JsonPath(element.getAsJsonObject().toString());
		Set<Map.Entry<String, JsonElement>> json_entries = obj.entrySet();
		//List list = new ArrayList<>(json_entries);
		int i = 0;
		for (Map.Entry<String, JsonElement> jsonentry: json_entries) {
			//            System.out.println("Current JSON Key" + jsonentry.getKey());
			String jsonkey = jsonentry.getKey();
			Map.Entry<String, JsonElement> responseentry = (Entry<String, JsonElement>) list.get(i);
			String responsekey = responseentry.getKey();
			//        	System.out.println("main key ----------> " + data.getKey());
			//            	System.out.println("Current Response Key" + responsekey);
			//            	System.out.println("key---------------> "  + responsekey);
			//            	System.out.println("value json--------------->" + jsonPath.get(jsonkey));
			//            	Assertion.assertNotNull(jsonPath.getString(jsonkey), "Check \"" + jsonkey + "\" exists in the response");
			//            	Assertion.assertEquals(jsonkey, responsekey, "Check expected position of " + responsekey);
			//            	System.out.println("value response ---------->>>>" + responsePath.get(responsekey));
			//            	System.out.println("json ---------->>>>" + jsonPath.get(jsonkey).getClass().getSimpleName() );
			//            	System.out.println("response ---------->>>>" + responsePath.get(responsekey).getClass().getSimpleName());
			if (jsonPath.get(jsonkey) instanceof Long || jsonPath.get(jsonkey) instanceof Integer || jsonPath.get(jsonkey) instanceof Double || jsonPath.get(jsonkey) instanceof Float) {
				Assertion.assertTrue(responsePath.get(responsekey) instanceof Long || responsePath.get(responsekey) instanceof Integer || responsePath.get(responsekey) instanceof Double || responsePath.get(responsekey) instanceof Float, "Check datatype match for \"" + responsePath.get(responsekey) + "\"   -   " + "Expected: Number ----  Actual: Number");
			}
			else {
				Assertion.assertEquals(jsonPath.get(jsonkey).getClass().getSimpleName(), responsePath.get(responsekey).getClass().getSimpleName(), "Check datatype match for \"" + jsonPath.get(jsonkey) + "\"   -   " + "Expected: " + jsonPath.get(jsonkey).getClass().getSimpleName()+ " ----  Actual: " +  responsePath.get(responsekey).getClass().getSimpleName());
			}
			//            	Boolean numeric = jsonPath.get(jsonkey).toString().matches("-?\\d+(\\.\\d+)?");
			//            	Assertion.assertEquals(jsonPath.get(jsonkey).getClass().getSimpleName(), responsePath.get(responsekey).getClass().getSimpleName(), "Check datatype match \"" + jsonPath.get(jsonkey) + "\" - " + "Expected: " + jsonPath.get(jsonkey).getClass().getSimpleName()+ " ----  Actual: " +  responsePath.get(responsekey).getClass().getSimpleName());
			i++;
		} 
	}

	public void verifyUpdateName(Response response, String expectedStatusCode, String message) {
		String convertAsStr = response.asString();
		JsonPath js = new JsonPath(convertAsStr);
		System.out.println("mapping--------------------->"+convertAsStr);
		Assertion.assertEquals(js.getString("name"), expectedStatusCode, "Check name Updated");
		ExtentTestManager.report("Verify name", "Udpated", convertAsStr);
	}

	// ID delete operation	
	public Response getID_Delete(String testCaseID, String stepName, String resourceUrl,Long id) throws Exception{					
		ExtentTestManager.startlog(testCaseID, stepName, "trying to delete the ID");	
		Response res = given().header("Content-Type","application/json").													
				when().					
				delete(resourceUrl+id).
				then().assertThat().
				extract().response();    	    
		String convertAsStr = res.asString();
		JsonPath js = new JsonPath(convertAsStr);
		ExtentTestManager.report(testCaseID, "Delete operation", convertAsStr);
		return res;		
	} 
	public boolean verifyValidationErrorMessage(String testCaseID,String stepName,Response response,String expectedErrMsg) throws Exception
	{    	
		ExtentTestManager.startlog(testCaseID, stepName, "verying the blank validation");
		JsonPath js = new JsonPath(response.asString().trim());
		String ResPonseMsg = js.getString("message");
		System.out.println(ResPonseMsg);
		if(expectedErrMsg.contains(ResPonseMsg))
		{
			ExtentTestManager.pass(testCaseID, stepName, "Actual response is as: "+ResPonseMsg+" expected Error Message: "+expectedErrMsg);
			return true;

		}else{
			ExtentTestManager.fail("Actual response is as: "+ResPonseMsg+" expected Error Message: "+expectedErrMsg);
			return false;
		}				
	}



}
